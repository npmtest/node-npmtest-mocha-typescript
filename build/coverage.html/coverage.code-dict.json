{"/home/travis/build/npmtest/node-npmtest-mocha-typescript/test.js":"/* istanbul instrument in package npmtest_mocha_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mocha-typescript/lib.npmtest_mocha_typescript.js":"/* istanbul instrument in package npmtest_mocha_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mocha_typescript = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mocha_typescript = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mocha-typescript/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mocha-typescript && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mocha_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mocha_typescript\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mocha_typescript.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mocha_typescript.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mocha_typescript.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mocha_typescript.__dirname + '/lib.npmtest_mocha_typescript.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mocha-typescript/node_modules/mocha-typescript/index.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Test = require(\"mocha/lib/test\");\nconst Common = require(\"mocha/lib/interfaces/common\");\nconst globalTestFunctions = {\n    get it() { return global.it; },\n    get before() { return global.before; },\n    get beforeEach() { return global.beforeEach; },\n    get after() { return global.after; },\n    get afterEach() { return global.afterEach; }\n};\nlet describeFunction = global.describe;\nlet skipSuiteFunction = describeFunction && describeFunction.skip;\nlet onlySuiteFunction = describeFunction && describeFunction.only;\n// key => Symbol(\"mocha-typescript:\" + key)\nlet nodeSymbol = key => \"__mts_\" + key;\nlet testNameSymbol = nodeSymbol(\"test\");\nlet slowSymbol = nodeSymbol(\"slow\");\nlet timeoutSymbol = nodeSymbol(\"timout\");\nlet onlySymbol = nodeSymbol(\"only\");\nlet pendingSumbol = nodeSymbol(\"pending\");\nlet skipSymbol = nodeSymbol(\"skip\");\nlet contextSymbol = nodeSymbol(\"context\");\nlet handled = nodeSymbol(\"handled\");\nfunction applyDecorators(mocha, ctorOrProto, method, instance) {\n    const timeoutValue = method[timeoutSymbol];\n    if (typeof timeoutValue === \"number\") {\n        mocha.timeout(timeoutValue);\n    }\n    const slowValue = method[slowSymbol];\n    if (typeof slowValue === \"number\") {\n        mocha.slow(slowValue);\n    }\n    const contextProperty = ctorOrProto[contextSymbol];\n    if (contextProperty) {\n        instance[contextProperty] = mocha;\n    }\n}\nconst noname = cb => cb;\nfunction makeTestFunction(target, context) {\n    return function () {\n        applyDecorators(this, target, target, target);\n        let instance;\n        if (target.before) {\n            if (target.before.length > 0) {\n                context.before(function (done) {\n                    applyDecorators(this, target, target.before, target);\n                    return target.before(done);\n                });\n            }\n            else {\n                context.before(function () {\n                    applyDecorators(this, target, target.before, target);\n                    return target.before();\n                });\n            }\n        }\n        if (target.after) {\n            if (target.after.length > 0) {\n                context.after(function (done) {\n                    applyDecorators(this, target, target.after, target);\n                    return target.after(done);\n                });\n            }\n            else {\n                context.after(function () {\n                    applyDecorators(this, target, target.after, target);\n                    return target.after();\n                });\n            }\n        }\n        let prototype = target.prototype;\n        let beforeEachFunction;\n        if (prototype.before) {\n            if (prototype.before.length > 0) {\n                beforeEachFunction = noname(function (done) {\n                    instance = new target();\n                    applyDecorators(this, prototype, prototype.before, instance);\n                    return prototype.before.call(instance, done);\n                });\n            }\n            else {\n                beforeEachFunction = noname(function () {\n                    instance = new target();\n                    applyDecorators(this, prototype, prototype.before, instance);\n                    return prototype.before.call(instance);\n                });\n            }\n        }\n        else {\n            beforeEachFunction = noname(function () {\n                instance = new target();\n            });\n        }\n        context.beforeEach(beforeEachFunction);\n        let afterEachFunction;\n        if (prototype.after) {\n            if (prototype.after.length > 0) {\n                afterEachFunction = noname(function (done) {\n                    try {\n                        applyDecorators(this, prototype, prototype.after, instance);\n                        return prototype.after.call(instance, done);\n                    }\n                    finally {\n                        instance = undefined;\n                    }\n                });\n            }\n            else {\n                afterEachFunction = noname(function () {\n                    try {\n                        applyDecorators(this, prototype, prototype.after, instance);\n                        return prototype.after.call(instance);\n                    }\n                    finally {\n                        instance = undefined;\n                    }\n                });\n            }\n        }\n        else {\n            afterEachFunction = noname(function () {\n                instance = undefined;\n            });\n        }\n        context.afterEach(afterEachFunction);\n        Object.getOwnPropertyNames(prototype).forEach(key => {\n            try {\n                let method = prototype[key];\n                if (method === target) {\n                    return;\n                }\n                let testName = method[testNameSymbol];\n                let shouldSkip = method[skipSymbol];\n                let shouldOnly = method[onlySymbol];\n                let shouldPending = method[pendingSumbol];\n                let testFunc = (shouldSkip && context.it.skip)\n                    || (shouldOnly && context.it.only)\n                    || context.it;\n                if (testName || shouldOnly || shouldPending || shouldSkip) {\n                    testName = testName || method.name;\n                    if (shouldPending && !shouldSkip && !shouldOnly) {\n                        context.it.skip(testName);\n                    }\n                    else if (method.length > 0) {\n                        testFunc(testName, noname(function (done) {\n                            applyDecorators(this, prototype, method, instance);\n                            return method.call(instance, done);\n                        }));\n                    }\n                    else {\n                        testFunc(testName, noname(function () {\n                            applyDecorators(this, prototype, method, instance);\n                            return method.call(instance);\n                        }));\n                    }\n                }\n            }\n            catch (e) {\n                // console.log(e);\n            }\n        });\n    };\n}\nfunction suite(target) {\n    let decoratorName = typeof target === \"string\" && target;\n    function result(target) {\n        let targetName = decoratorName || target.name;\n        let shouldSkip = target[skipSymbol];\n        let shouldOnly = target[onlySymbol];\n        let shouldPending = target[pendingSumbol];\n        let suiteFunc = (shouldSkip && skipSuiteFunction)\n            || (shouldOnly && onlySuiteFunction)\n            || (shouldPending && skipSuiteFunction)\n            || describeFunction;\n        suiteFunc(targetName, makeTestFunction(target, globalTestFunctions));\n    }\n    return decoratorName ? result : result(target);\n}\nexports.suite = suite;\nfunction test(target, propertyKey) {\n    let decoratorName = typeof target === \"string\" && target;\n    let result = (target, propertyKey) => {\n        target[propertyKey][testNameSymbol] = decoratorName || propertyKey;\n    };\n    return decoratorName ? result : result(target, propertyKey);\n}\nexports.test = test;\n/**\n * Set a test method execution time that is considered slow.\n * @param time The time in miliseconds.\n */\nfunction slow(time) {\n    return function (target, propertyKey) {\n        if (arguments.length === 1) {\n            target[slowSymbol] = time;\n        }\n        else {\n            target[propertyKey][slowSymbol] = time;\n        }\n    };\n}\nexports.slow = slow;\n/**\n * Set a test method or suite timeout time.\n * @param time The time in miliseconds.\n */\nfunction timeout(time) {\n    return function (target, propertyKey) {\n        if (arguments.length === 1) {\n            target[timeoutSymbol] = time;\n        }\n        else {\n            target[propertyKey][timeoutSymbol] = time;\n        }\n    };\n}\nexports.timeout = timeout;\n/**\n * Mart a test or suite as pending.\n *  - Used as `@suite @pending class` is `describe.skip(\"name\", ...);`.\n *  - Used as `@test @pending method` is `it(\"name\");`\n */\nfunction pending(target, propertyKey) {\n    if (arguments.length === 1) {\n        target[pendingSumbol] = true;\n    }\n    else {\n        target[propertyKey][pendingSumbol] = true;\n    }\n}\nexports.pending = pending;\n/**\n * Mark a test or suite as the only one to execute.\n *  - Used as `@suite @only class` is `describe.only(\"name\", ...)`.\n *  - Used as `@test @only method` is `it.only(\"name\", ...)`.\n */\nfunction only(target, propertyKey) {\n    if (arguments.length === 1) {\n        target[onlySymbol] = true;\n    }\n    else {\n        target[propertyKey][onlySymbol] = true;\n    }\n}\nexports.only = only;\n/**\n * Mark a test or suite to skip.\n *  - Used as `@suite @skip class` is `describe.skip(\"name\", ...);`.\n *  - Used as `@test @skip method` is `it.skip(\"name\")`.\n */\nfunction skip(target, propertyKey) {\n    if (arguments.length === 1) {\n        target[onlySymbol] = true;\n    }\n    else {\n        target[propertyKey][skipSymbol] = true;\n    }\n}\nexports.skip = skip;\n/**\n * Mark a method as test. Use the method name as test name.\n */\nfunction context(target, propertyKey) {\n    target[contextSymbol] = propertyKey;\n}\nexports.context = context;\n/**\n * Rip-off the TDD and BDD at: mocha/lib/interfaces/tdd.js and mocha/lib/interfaces/bdd.js\n * Augmented the suite and test for the mocha-typescript decorators.\n */\nfunction tsdd(suite) {\n    var suites = [suite];\n    suite.on('pre-require', function (context, file, mocha) {\n        var common = Common(suites, context, mocha);\n        context.before = common.before;\n        context.after = common.after;\n        context.beforeEach = common.beforeEach;\n        context.afterEach = common.afterEach;\n        context.run = mocha.options.delay && common.runWithSuite(suite);\n        // Copy of bdd\n        context.describe = context.context = function (title, fn) {\n            return common.suite.create({\n                title: title,\n                file: file,\n                fn: fn\n            });\n        };\n        context.xdescribe = context.xcontext = context.describe.skip = function (title, fn) {\n            return common.suite.skip({\n                title: title,\n                file: file,\n                fn: fn\n            });\n        };\n        context.describe.only = function (title, fn) {\n            return common.suite.only({\n                title: title,\n                file: file,\n                fn: fn\n            });\n        };\n        context.it = context.specify = function (title, fn) {\n            var suite = suites[0];\n            if (suite.isPending()) {\n                fn = null;\n            }\n            var test = new Test(title, fn);\n            test.file = file;\n            suite.addTest(test);\n            return test;\n        };\n        context.it.only = function (title, fn) {\n            return common.test.only(mocha, context.it(title, fn));\n        };\n        context.xit = context.xspecify = context.it.skip = function (title) {\n            context.it(title);\n        };\n        context.it.retries = function (n) {\n            context.retries(n);\n        };\n        // Processing decorators for mocha-typescript\n        function makeClassSuite(title, target) {\n            const shouldSkip = target[skipSymbol];\n            const shouldOnly = target[onlySymbol];\n            const shouldPending = target[pendingSumbol];\n            const fn = makeTestFunction(target, context);\n            if (shouldOnly) {\n                return context.suite.only({ title, file, fn });\n            }\n            else if (shouldSkip || shouldPending) {\n                return context.suite.skip({ title, file, fn });\n            }\n            else {\n                return common.suite.create({ title, file, fn });\n            }\n        }\n        // tdd + mocha-typescript decorators\n        context.suite = function (arg1, arg2) {\n            if (typeof arg1 === \"string\" && arguments.length === 1) {\n                return function (target) {\n                    makeClassSuite(arg1, target);\n                };\n            }\n            else if (typeof arg1 === \"function\") {\n                return makeClassSuite(arg1.name, arg1);\n            }\n            else {\n                let title = arg1;\n                let fn = arg2;\n                return common.suite.create({\n                    title: title,\n                    file: file,\n                    fn: fn\n                });\n            }\n        };\n        context.suite.skip = function (title, fn) {\n            return common.suite.skip({\n                title: title,\n                file: file,\n                fn: fn\n            });\n        };\n        context.suite.only = function (title, fn) {\n            return common.suite.only({\n                title: title,\n                file: file,\n                fn: fn\n            });\n        };\n        context.test = function (arg1, arg2, arg3) {\n            if (typeof arg1 === \"string\" && arguments.length === 1) {\n                return exports.test(arg1);\n            }\n            else if (typeof arg1 === \"object\" && (typeof arg2 === \"string\" || typeof arg2 === \"symbol\") && arguments.length >= 2) {\n                return exports.test(arg1, arg2);\n            }\n            else {\n                let title = arg1;\n                let fn = arg2;\n                var suite = suites[0];\n                if (suite.isPending()) {\n                    fn = null;\n                }\n                var test = new Test(title, fn);\n                test.file = file;\n                suite.addTest(test);\n                return test;\n            }\n        };\n        context.test.only = function (title, fn) {\n            return common.test.only(mocha, context.test(title, fn));\n        };\n        context.test.skip = common.test.skip;\n        context.test.retries = common.test.retries;\n    });\n}\n;\nmodule.exports = Object.assign(tsdd, exports);\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-mocha-typescript/node_modules/mocha-typescript/bin/watch.js":"#!/usr/bin/env node\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process = require(\"child_process\");\nconst readline = require(\"readline\");\nconst chalk = require(\"chalk\");\nconst yargs = require(\"yargs\");\nvar spawn = child_process.spawn;\nvar argv = yargs\n    .options({\n    \"p\": {\n        alias: \"project\",\n        demand: false,\n        default: \".\",\n        describe: \"Path to tsconfig file or directory containing tsconfig, passed to `tsc -p <value>`.\",\n        type: \"string\"\n    },\n    \"t\": {\n        alias: \"tsc\",\n        demand: false,\n        default: \"./node_modules/typescript/bin/tsc\",\n        describe: \"Path to executable tsc, by default points to typescript installed as dev dependency. Set to 'tsc' for global tsc installation.\",\n        type: \"string\"\n    },\n    \"o\": {\n        alias: \"opts\",\n        demand: false,\n        default: \"./test/mocha.opts\",\n        describe: \"Path to mocha.opts file containing additional mocha configuration.\",\n        type: \"string\"\n    },\n    \"m\": {\n        alias: \"mocha\",\n        demand: false,\n        default: \"./node_modules/mocha/bin/_mocha\",\n        describe: \"Path to executable mocha, by default points to mocha installed as dev dependency.\",\n        type: \"string\"\n    },\n    \"g\": {\n        alias: \"grep\",\n        demand: false,\n        default: undefined,\n        describe: \"Passed down to mocha: only run tests matching <pattern>\",\n        type: \"string\"\n    },\n    \"f\": {\n        alias: \"fgrep\",\n        demand: false,\n        default: undefined,\n        describe: \"Passed down to mocha: only run tests containing <string>\",\n        type: \"string\"\n    }\n})\n    .help(\"h\")\n    .alias(\"h\", \"help\")\n    .argv;\nvar stdl = readline.createInterface({ input: process.stdin, });\nstdl.on(\"line\", line => {\n    // TODO: handle \"g <pattern>\" or \"f <pattern>\" to run mocha with pattern\n    // Ctrl + R may restart mocha test run?\n});\nvar mochap = null;\nvar errors = 0;\nfunction compilationStarted() {\n    if (mochap) {\n        mochap.kill(\"SIGINT\");\n        console.log();\n    }\n    mochap = null;\n    errors = 0;\n}\nfunction foundErrors() {\n    errors++;\n}\nfunction compilationComplete() {\n    if (errors) {\n        console.log(chalk.red(\"TS errors!\"));\n        return;\n    }\n    else {\n        console.log(chalk.gray(\"Run mocha.\"));\n    }\n    var mocha_options = [\"--opts\", argv.opts, \"--colors\"].concat(argv._);\n    if (argv.g) {\n        mocha_options.push(\"-g\");\n        mocha_options.push(argv.g);\n    }\n    if (argv.f) {\n        mocha_options.push(\"-f\");\n        mocha_options.push(argv.f);\n    }\n    mochap = spawn(\"node\", [argv.mocha].concat(mocha_options));\n    let source = mochap;\n    mochap.on(\"close\", code => {\n        if (source === mochap) {\n            if (code) {\n                console.log(chalk.red(\"Exited with \" + code));\n            }\n            else {\n            }\n            mochap = null;\n        }\n    });\n    mochap.stdout.on(\"data\", chunk => {\n        // Ensure old processes won't interfere tsc, .pipe here may be good enough.\n        if (source === mochap) {\n            process.stdout.write(chunk);\n        }\n    });\n}\nvar tscp = spawn(\"node\", [argv.tsc, \"-p\", argv.project, \"-w\"]);\nvar tscl = readline.createInterface({ input: tscp.stdout });\ntscl.on(\"line\", line => {\n    if (line.indexOf(\"Compilation complete.\") >= 0) {\n        console.log(line);\n        compilationComplete();\n    }\n    else if (line.indexOf(\"File change detected.\") >= 0) {\n        compilationStarted();\n        console.log(line);\n    }\n    else if (line.indexOf(\": error TS\") >= 0) {\n        console.log(line);\n        foundErrors();\n    }\n});\n//# sourceMappingURL=watch.js.map"}